type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
mse_1 = mse.c1,
mse_2 = mse.c2,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
#dataframe with all possible combinations
combinations <- expand.grid(
disc1 = c(0, 8),
disc2 = c(0, 8),
nblo1 = c(30, 100),
nblo2 = c(30, 100),
type1 = 1:6,
type2 = 1:6)
#dataframe with all combinations of interest
combinations <- subset(
combinations,
disc1 != disc2 &
nblo1 == nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 != nblo2 &
type1 == type2 |
disc1 == disc2 &
nblo1 == nblo2 &
type1 != type2,
drop = TRUE)
results <- list()
l = 1
for (i in 1:nrow(combinations)) {
#filter every row separatly and subset values
row <- combinations[i,]
disc1 <- as.double(row["disc1"])
disc2 <- as.double(row["disc2"])
nblo1 <- as.double(row["nblo1"])
nblo2 <- as.double(row["nblo2"])
type1 <- as.double(row["type1"])
type2 <- as.double(row["type2"])
#make components for rtest
component_1 <- data.w[
discount == disc1 &
nblock == nblo1 &
type == type1]
component_2 <- data.w[
discount == disc2 &
nblock == nblo2 &
type == type2]
#spearman and pearson correlations
cor.c1.spearman <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "spearman")
cor.c2.spearman <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "spearman")
cor.c1.pearson <- cor(
component_1$par_tau,
component_1$true_par_tau,
method = "pearson")
cor.c2.pearson <- cor(
component_2$par_tau,
component_2$true_par_tau,
method = "pearson")
#correlation tests for spearman and pearson
rtest.spearman <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.spearman,
r34 = cor.c2.spearman)
rtest.pearson <- r.test(
n = nrow(component_1),
n2 = nrow(component_2),
r12 = cor.c1.pearson,
r34 = cor.c2.pearson)
#list with all information of interest
results[[l]] <- data.table(
discount_1 = disc1,
discount_2 = disc2,
nblock_1 = nblo1,
nblock_2 = nblo2,
type_1 = type1,
type_2 = type2,
spearman_1 = cor.c1.spearman,
spearman_2 = cor.c2.spearman,
pearson_1 = cor.c1.pearson,
pearson_2 = cor.c2.pearson,
p.spearman = round(rtest.spearman$p, 4),
z.spearman = round(rtest.spearman$z, 4),
p.pearson = round(rtest.pearson$p, 4),
z.pearson = round(rtest.pearson$z, 4)
)
l = l + 1
}
#convert results into data.table
results <- rbindlist(results)
results
df <- data.frame(
x = c(NA, NA, NA, 1, 6, 3, NA, 2),
y = c(1, 2, 9, NA, NA, NA, NA, 1),
z = c("a", "a", "a", "b", "b", "b", "c", "c")
)
rowSums(df[,c("x", "y")], na.rm = TRUE)
pkgs <- c(
"tidyverse",
"data.table",
)
pkgs <- c(
"tidyverse",
"data.table"
)
lapply(pkgs, library, character.only = TRUE)
# Input -------------------------------------------------------------------
install.packages("statsr")
sum(dbinom(0:3, size = 100, p= 0.5))
options(digits = 2)
sum(dbinom(0:3, size = 100, p= 0.5))
1 - sum(dbinom(0:3, size = 100, p= 0.5))
pbinom(3, 100, 0.5)
pbinom(3, 12, 0.5)
1 - pbinom(998, 6000, p = 1/6)
1 - pbinom(999, 6000, p = 1/6)
1 - pbinom(99, 6000, p = 1/6)
sum(dbinom(0:5, size = 300, p= 0.01))
sum(dbinom(0:5, size = 300, p= 0.50))
sum(dbinom(0:5, size = 300, p= 0.10))
sum(dbinom(0:3, size = 8, p= 0.50))
sum(dbinom(0:3, size = 8, p= 0.01))
sum(dbinom(0:3, size = 8, p= 0.1))
0.99^300
1 - sum(dbinom(0:5, size = 300, p= 0.01))
1 - sum(dbinom(0:4, size = 300, p= 0.01))
options(digits = 3)
1 - sum(dbinom(0:4, size = 300, p= 0.01))
###########################
####### Packages ##########
###########################
pkgs<-c(
"tidyverse",
"data.table"
)
lapply(pkgs, library, character.only = TRUE)
install.packages('knitr')
install.packages("knitr")
install.packages('tinytex')
tinytex::install_tinytex()
#source other R-Files needed
source("packages.R")
#setwd to current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source other R-Files needed
source("packages.R")
#import data
X<-fread("..//data//train.csv")
View(X)
table(X$satisfaction)
prop.table(table(X$satisfaction))
table(is.na(X$satisfaction))
dim(X)
length(X)
for(i in 1:length(X)){
na <- paste0(table(is.na(X$i)), names(X)[i])
return(na)
}
print(na)
for(i in 1:length(X)){
na <- c(table(is.na(X$i)), names(X)[i])
print(na)
}
x<-list()
for(i in 1:length(X)){
x[[i]] <- c(table(is.na(X$i)), names(X)[i])
print(na)
}
x<-list()
for(i in 1:length(X)){
x[[i]] <- c(table(is.na(X$i)), names(X)[i])
}
x
table(is.na(X$`Arrival Delay in Minutes`))
View(X)
x[10]
x[22]
x[21]
x[20]
x[19]
x[23]
x[24]
table(is.na(X$`Arrival Delay in Minutes`))
for(i in 1:length(X)){
x[[i]] <- list("NA" = table(is.na(X$i)), "variable" = i)
c
)()
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("NA" = table(is.na(X$i)), "variable" = i))
}
for(i in 1:length(X)){
x[[i]] <- list("NA" = table(is.na(X$i)), "variable" = i)
}
x
x<-list()
for(i in 1:length(X)){
x[i] <- list("NA" = table(is.na(X$i)), "variable" = i)
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("NA" = table(is.na(X$i)), "variable" = i)
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X$i)))
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = is.na(X$i))
}
x
x[[i]] <- list("variable" = names(X)[i], "NA" = count(is.na(X$i)))
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = count(is.na(X$i)))
}
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X$i)))
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X$i)))
}
x
i = 23
table(is.na(X$23))
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[i])))
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[,i])))
}
X<-setDT(X)
#import data
X<-fread("..//data//train.csv")
X<-setDT(X)
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[,i])))
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[,..i])))
}
x
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[,..i])))
if("NA" == TRUE){
print( x[[i]])
}
}
class(X)
X
#import data
X<-fread("..//data//train.csv")
X<-setDT(X)
#import data
X<-fread("..//data//train.csv")
class(X)
X<-setDF(X)
class(X)
#import data
X<-fread("..//data//train.csv")
class(X)
summary(X)
sapply(X, class)
sapply(X, typeof)
glimpse(X)
names(X)
summary(X)
glimpse(X)
sapply(X, typeof)
dim(X)
#check for balance
table(X$satisfaction)
prop.table(X$satisfaction)
prop.table(table(X$satisfaction))
glimpse(X)
prop.table(table(X$satisfaction)) #No upsampling required
#detect NAs
x<-list()
for(i in 1:length(X)){
x[[i]] <- list("variable" = names(X)[i], "NA" = table(is.na(X[,..i])))
}
x
#detect NAs
detna<-list()
for(i in 1:length(X)){
detna[[i]] <- c("variable" = names(X)[i],
"NA" = table(is.na(X[,..i])))
}
detna
#detect NAs
detna<-list()
for(i in 1:length(X)){
detna[[i]] <- list("variable" = names(X)[i],
"NA" = table(is.na(X[,..i])))
}
detna
ifelse(
detna$NA == TRUE,
print(detna$variable)
)
ifelse(
detna$"NA" == TRUE,
print(detna$variable)
)
grepl("TRUE", detna)
which(grepl("TRUE", detna))
names(X)[which(grepl("TRUE", detna))]
#filter the list for the columns that contain NA (string: "TRUE")
names(X)[which(grepl("TRUE", detna))]
#How many NAs were there?
table(X$`Arrival Delay in Minutes`)
#How many NAs were there?
detna[`Arrival Delay in Minutes`]
#filter the list for the columns that contain NA (string: "TRUE")
(containNAs<-names(X)[which(grepl("TRUE", detna))])
#How many NAs were there?
detna[containNAs]
#How many NAs were there?
detna[which(grepl("TRUE", detna))]
cor(X$"Arrival Delay in Minutes")
#How many NAs were in the "Arrival Delay in Minutes" variable?
X[which(grepl("TRUE", detna))] #310
#How many NAs were in the "Arrival Delay in Minutes" variable?
X[,which(grepl("TRUE", detna))] #310
#How many NAs were in the "Arrival Delay in Minutes" variable?
detna[,which(grepl("TRUE", detna))] #310
#How many NAs were in the "Arrival Delay in Minutes" variable?
detna[which(grepl("TRUE", detna))] #310
#Is there a systematic
table(is.na(X$`Arrival Delay in Minutes`),X$satisfaction)
#Is there a systematic
with(X, table(is.na(`Arrival Delay in Minutes`), satisfaction)
)
#Is there a systematic
with(X, prop.table(table(is.na(`Arrival Delay in Minutes`), satisfaction)))
#Is there a systematic
with(X, table(is.na(`Arrival Delay in Minutes`), satisfaction))
#Is there a systematic relationship between NAs and criterion?
with(X, table(which(is.na(`Arrival Delay in Minutes`)), satisfaction)) #Not really
#Is there a systematic relationship between NAs and criterion?
with(X, table(is.na(`Arrival Delay in Minutes`)==TRUE, satisfaction)) #Not really
sapply(X, typeof)
glimpse(X)
for (i in 1:length(X)) {
X[,i]<-as.factor(is.character(X[,i]))
}
# Conversion --------------------------------------------------------------
rm(i)
i=2
X[,i]
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
class(X)
X[,i]
# Conversion --------------------------------------------------------------
rm(i)
for (i in 1:length(X)) {
X[,i]<-as.factor(is.character(X[,i]))
}
glimpse(X)
is.character(X[,i])
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
head(X)
glimpse(X)
# Conversion --------------------------------------------------------------
rm(i)
for (i in 1:length(X)) {
# Conversion --------------------------------------------------------------
rm(i)
for (i in 1:length(X)) {
X[,i]<-if(is.character(X[,i])==TRUE){as.factor(X[,i])}
}
glimpse(X)
glimpse(X)
glimpse(X)
)
for (i in 1:length(X)) {
X[,i]<-if(is.character(X[,i])==TRUE){as.factor(X[,i])}
}
# Conversion --------------------------------------------------------------
rm(i)
glimpse(X)
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
glimpse(X)
for (i in 1:length(X)) {
X[,i]<-if(is.character(X[,i])==TRUE){as.factor(X[,i])}
}
for (i in 1:length(X)) {
X[,i]<-ifelse(is.character(X[,i])==TRUE, as.factor(X[,i]),)
}
for (i in 1:length(X)) {
X[,i]<-ifelse(is.character(X[,i])==TRUE, as.factor(X[,i]),as.numeric())
}
glimpse(X)
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
for (i in 1:length(X)) {
X[,i]<-ifelse(is.character(X[,i])==TRUE, as.factor(X[,i]),as.numeric())
}
glimpse(X)
is.character(X[,i])==TRUE
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
X
head(X)
i=1
is.character(X[,i])==TRUE
i=2
is.character(X[,i])==TRUE
i=3
is.character(X[,i])==TRUE
# Conversion --------------------------------------------------------------
for (i in 1:length(X)) {
if(is.character(X[,i])==TRUE){
X[,i]<-as.factor(X[,i])
}
}
glimpse(X)
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
# Conversion --------------------------------------------------------------
for (i in 1:length(X)) {
if(is.character(X[,i])){
X[,i]<-as.factor(X[,i])
}
}
glimpse(X)
table(Gender)
with(X, table(Gender))
