sum(dbinom(0:5, size = 300, p= 0.10))
sum(dbinom(0:3, size = 8, p= 0.50))
sum(dbinom(0:3, size = 8, p= 0.01))
sum(dbinom(0:3, size = 8, p= 0.1))
0.99^300
1 - sum(dbinom(0:5, size = 300, p= 0.01))
1 - sum(dbinom(0:4, size = 300, p= 0.01))
options(digits = 3)
1 - sum(dbinom(0:4, size = 300, p= 0.01))
###########################
####### Main #############
###########################
library(installr)
installr()
install.packages(c("BH", "broom", "callr", "car", "chron", "cli", "clipr", "coda", "colorspace", "conquer", "covr", "cowplot", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "deldir", "dendextend", "desc", "DescTools", "devtools", "diffobj", "digest", "doParallel", "doSNOW", "dplyr", "DT", "e1071", "effsize", "emmeans", "expm", "fansi", "farver", "fastmap", "fdrtool", "flexmix", "foghorn", "forcats", "foreach", "formattable", "Formula", "freetypeharfbuzz", "fs", "gargle", "gdtools", "GGally", "ggforce", "ggplot2", "ggraph", "ggrepel", "ggsignif", "ggthemes", "gh", "git2r", "glue", "gmp", "graphlayouts", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "IRdisplay", "isoband", "iterators", "janitor", "jsonlite", "jtools", "labeling", "lavaan", "lifecycle", "lme4", "lmerTest", "lubridate", "magrittr", "maptools", "MASS", "matlib", "MatrixModels", "matrixStats", "memoise", "mime", "mnormt", "NLP", "openssl", "openxlsx", "partitions", "pbapply", "pbkrtest", "permutations", "pillar", "pkgbuild", "pkgdown", "pkgload", "plotly", "plotrix", "processx", "promises", "ps", "psych", "qdap", "qgraph", "quantreg", "R6", "rappdirs", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "remotes", "repr", "reprex", "rgdal", "rgeos", "rgl", "rio", "rlang", "rmarkdown", "ROI", "rprojroot", "rstatix", "rstudioapi", "rvest", "sf", "shiny", "shinytest", "slam", "sp", "SparseM", "spelling", "statmod", "statsr", "stringdist", "stringi", "sys", "systemfonts", "testthat", "tibble", "tidyr", "tm", "tweenr", "units", "usethis", "utf8", "vctrs", "vdiffr", "VGAM", "webdriver", "withr", "xlsx", "XML", "xmlparsedata", "zip"))
#setwd to current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd to current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#source other R-Files needed
source("packages.R")
detach(X)
#gender
tabyl(X$Gender)
X<-fread("..//data//train.csv")
X<-setDF(X)
library(ggplot2)
library(janitor)
library(data.table)
X<-fread("..//data//train.csv")
X<-setDF(X)
X<-fread("..//data//train.csv")
X<-setDF(X)
#gender
tabyl(X, Gender)
#Customer Type
tabyl(`Customer Type`)
ggplot(X, aes(x = `Customer Type`))+
geom_bar() +
facet_wrap(~satisfaction)
#gender
tabyl(X, Gender)
ggplot(X, aes(x = Gender))+
geom_bar() +
facet_wrap(~satisfaction)
#Customer Type
tabyl()
par(mfrow = 3)
###########################
####### Packages ##########
###########################
pkgs<-c(
"tidyverse",
"data.table",
"janitor",
"grid.extra"
)
lapply(pkgs, library, character.only = TRUE)
###########################
####### Packages ##########
###########################
pkgs<-c(
"tidyverse",
"data.table",
"janitor",
"grid.extra"
)
lapply(pkgs, library, character.only = TRUE)
install.packages("gridExtra")
###########################
####### Packages ##########
###########################
pkgs<-c(
"tidyverse",
"data.table",
"janitor",
"gridExtra"
)
lapply(pkgs, library, character.only = TRUE)
#source other R-Files needed
source("packages.R")
#import data and make it a data.frame
X<-fread("..//data//train.csv")
X<-setDF(X)
class(X)
#general overview
names(X)
summary(X)
sapply(X, typeof)
glimpse(X)
dim(X) #103904, 25
#delete rows that are not of use.
X<-subset(X, select = -c(V1, id))
#check for balance of the criterion
table(X$satisfaction)
prop.table(table(X$satisfaction)) #No upsampling/downsampling required
#detect NAs
sapply(X, function(x) sum(is.null(x)))
sapply(X, function(x) sum(is.na(x))) #Arrival Delay in Minutes:310
#Is there a systematic relationship between NAs and criterion?
with(X, table(is.na(`Arrival Delay in Minutes`), satisfaction))[2,]
# 310 missing values - Are they all from the same flight?
onlyna<-X[which(is.na(X$`Arrival Delay in Minutes`)),]
max(table(onlyna$`Flight Distance`)) #No
#proportion of NAs in the dataset
with(X, prop.table(table(is.na(`Arrival Delay in Minutes`))))
#drop NA
X<-na.omit(X)
#delete variables which are no longer of use
rm(onlyna)
#Convert all character variables into factors (for efficiency)
#Note: This step is specifically for data vizualisation, I might recode
#some variables as dummys for modelling later
for (i in 1:length(X)){
if(is.character(X[,i])){
X[,i]<-as.factor(X[,i])
}
}
glimpse(X)
#attach dataframe
attach(X)
#gender
tabyl(Gender)
ggplot(X, aes(x = Gender))+
geom_bar() +
facet_wrap(~satisfaction)
grid.arrange(genplot, custypplot, typtraplot, claplotggplot, nrow=3, ncol=2)
genplot<-ggplot(X, aes(x = Gender))+
geom_bar() +
facet_wrap(~satisfaction)
custypplot<-ggplot(X, aes(x = `Customer Type`))+
geom_bar() +
facet_wrap(~satisfaction)
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction)
claplotggplot(X, aes(x = Class))+
geom_bar() +
facet_wrap(~satisfaction)
grid.arrange(genplot, custypplot, typtraplot, claplotggplot, nrow=3, ncol=2)
claplot<-ggplot(X, aes(x = Class))+
geom_bar() +
facet_wrap(~satisfaction)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2)
NominalPlot<-grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2)
source(main.R)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source(main.R)
source("..//code//main.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..//code//main.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..//code//packages.R")
source("..//code//main.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("..//code//packages.R")
X<-fread("..//data//train.csv")
source("..//code//main.R")
#gender
barplot(table(X$Gender))
#gender
barplot(table(X$Gender))
X<-fread("..//data//train.csv")
X<-setDF(X)
X<-subset(X, select = -c(V1, id))
X<-na.omit(X)
for (i in 1:length(X)){
if(is.character(X[,i])){
X[,i]<-as.factor(X[,i])
}
}
#gender
barplot(table(X$Gender))
#gender
par(mfrow=c(2,3))
barplot(table(X$Class))
?grid.arrange()
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(legend.text = element_text(angle = 90))
typtraplot
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(legend.text = element_text(angle = 180))
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction) +
coord_flip()
typtraplot
genplot<-ggplot(X, aes(x = Gender))+
geom_bar() +
facet_wrap(~satisfaction) +
coord_flip()
custypplot<-ggplot(X, aes(x = `Customer Type`))+
geom_bar() +
facet_wrap(~satisfaction) +
coord_flip()
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction) +
coord_flip()
claplot<-ggplot(X, aes(x = Class))+
geom_bar() +
facet_wrap(~satisfaction) +
coord_flip()
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2)
claplot<-ggplot(X, aes(x = Class))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(axis.text.x = element_text(angle = 90))
typtraplot<-ggplot(X, aes(x = `Type of Travel`))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(axis.text.x = element_text(angle = 90))
custypplot<-ggplot(X, aes(x = `Customer Type`))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(axis.text.x = element_text(angle = 90))
genplot<-ggplot(X, aes(x = Gender))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(axis.text.x = element_text(angle = 90))
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, height = 2)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, heights = 2)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, heights = 20)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, heights = 8)
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, heights = c(3,3))
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=3, ncol=2, heights = c(1,4))
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=2, heights = c(1,4))
grid.arrange(genplot, custypplot, typtraplot, claplot, nrow=2, heights = c(4,4))
tabyl(X, Gender)
source("..//code//packages.R")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
###########################
####### Packages ##########
###########################
pkgs<-c(
"tidyverse",
"data.table",
"janitor",
"gridExtra",
"knitr"
)
lapply(pkgs, library, character.only = TRUE)
##### Nominal #####
list<-list()
##### Nominal #####
list<-list()
for (i in names(X)) {
print(tabyl(i))
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
theme(axis.text.x = element_text(angle = 90))
}
grid.arrange(list, nrow=2)
View(list)
grid.arrange(list[[1]], list[[2]], list[[3]], list[[4]], nrow=2)
##### Nominal #####
list<-list()
for (i in names(X)) {
print(tabyl(i))
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(names(X)[i])+
theme(axis.text.x = element_text(angle = 90))
}
grid.arrange(list[[1]], list[[2]], list[[3]], list[[4]], nrow=2)
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle("names(X)[i]")+
theme(axis.text.x = element_text(angle = 90))
##### Nominal #####
list<-list()
for (i in names(X)) {
print(tabyl(i))
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(names(X)[i]))+
theme(axis.text.x = element_text(angle = 90))
}
grid.arrange(list[[1]], list[[2]], list[[3]], list[[4]], nrow=2)
names(X)[i]
names(X)[2]
names(X)[[i]]
##### Nominal #####
list<-list()
for (i in names(X)) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(names(X)[[i]])) +
theme(axis.text.x = element_text(angle = 90))
}
##### Nominal #####
list<-list()
for (i in names(X)) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
theme(axis.text.x = element_text(angle = 90))
}
grid.arrange(list[[1]], list[[2]], list[[3]], list[[4]], nrow=2)
##### Nominal #####
ggbarplots<-list()
for (i in names(X)) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("")+
theme(axis.text.x = element_text(angle = 90))
}
grid.arrange(list[[1]], list[[2]], list[[3]], list[[4]], nrow=2)
View(X)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
for (i in names(X)[c(1;2,4:20)]) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("")+
theme(axis.text.x = element_text(angle = 90))
}
#make barplots for ordinal and nominal variables
ggbarplots<-list()
for (i in names(X)[c(1:2, 4:20)]) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("")+
theme(axis.text.x = element_text(angle = 90))
}
names(X)[c(1:2, 4:20)]
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
list[[i]]<-ggplot(X, aes(x = i))+
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("")+
theme(axis.text.x = element_text(angle = 90))
}
View(ggbarplots)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = i)) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
}
##### Ordinal Variables #####
grid.arrange(list[[5]], list[[6]], list[[7]], list[[8]], nrow=2)
##### Ordinal Variables #####
grid.arrange(list[[5]], list[[6]], list[[7]], list[[8]], nrow=2)
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = i)) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = X[,i])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = X[,i])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
##### Ordinal Variables #####
grid.arrange(ggbarplots[[5]], ggbarplots[[6]], ggbarplots[[7]], ggbarplots[[8]], nrow=2)
##### Nominal Variables #####
grid.arrange(ggbarplots[1], ggbarplots[2], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = X[,i])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
column<-1
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = X[,column])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
col<-column+1
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
column=1
for (i in nominalordinal) {
ggbarplots[[i]]<-ggplot(X, aes(x = X[,column])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
column=column+1
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
X[,2]
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
count=1
for (i in nominalordinal) {
ggbarplots[[count]]<-ggplot(X, aes(x = X[,count])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
count=count+1
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
##### Nominal Variables #####
ggbarplots[[1]]
##### Nominal Variables #####
ggbarplots[[2]]
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
count=1
for (i in nominalordinal) {
ggbarplots[[count]]<-ggplot() +
geom_bar(aes(x = X[,count])) +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
count=count+1
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
#make barplots for ordinal and nominal variables
ggbarplots<-list()
nominalordinal<-names(X)[c(1:2, 4:20)]
count=1
for (i in nominalordinal) {
ggbarplots[[count]]<-ggplot(X, aes(x = X[,count])) +
geom_bar() +
facet_wrap(~satisfaction) +
ggtitle(paste(i)) +
xlab("") +
theme(axis.text.x = element_text(angle = 90))
count=count+1
}
##### Nominal Variables #####
grid.arrange(ggbarplots[[1]], ggbarplots[[2]], ggbarplots[[3]], ggbarplots[[4]], nrow=2)
